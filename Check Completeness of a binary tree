/**
 * Definition for a binary tree node.
 * struct TreeNode {
 *     int val;
 *     TreeNode *left;
 *     TreeNode *right;
 *     TreeNode() : val(0), left(nullptr), right(nullptr) {}
 *     TreeNode(int x) : val(x), left(nullptr), right(nullptr) {}
 *     TreeNode(int x, TreeNode *left, TreeNode *right) : val(x), left(left), right(right) {}
 * };
 */
class Solution {
public:
 
    bool isCompleteTree(TreeNode* root) {
        vector<vector<int>> arr;
        queue<TreeNode*> q;
        q.push(root);
        while(!q.empty()){
            int i=0;
            int n=q.size();
            vector<int> ans;
            for (int i = 0; i < n; i++) {
                TreeNode* a = q.front();
                q.pop();
                if (a == NULL) {
                ans.push_back(-1);
                continue;  
            }
        ans.push_back(a->val);
        q.push(a->left);
        q.push(a->right);
    }
    arr.push_back(ans);
    }
        //cout<<arr.size();
        arr.pop_back();
        // for(int i=0;i<arr.size();i++){
        //     for(int j=0;j<arr[i].size();j++){
        //         cout<<arr[i][j]<<" ";
        //     }
        //     cout<<"/" <<endl;
        // // }
        // cout<<"Size=="<<arr.size();
        for(int i=0;i<arr.size();i++){
            for(int j=1;j<arr[i].size();j++){
                if(i<arr.size()-1){
                    if(arr[i][j]==-1){
                        return false;
                    }
                }
                if(arr[i][j-1]==-1 and arr[i][j]!=-1){
                    return false;
                }
            }
        }
        return true;
    }
};
